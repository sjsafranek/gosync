// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: gosync.proto

package gosync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoSyncServiceClient is the client API for GoSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoSyncServiceClient interface {
	StartTransfer(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Response, error)
	UploadChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*Response, error)
}

type goSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSyncServiceClient(cc grpc.ClientConnInterface) GoSyncServiceClient {
	return &goSyncServiceClient{cc}
}

func (c *goSyncServiceClient) StartTransfer(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GoSyncService/StartTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSyncServiceClient) UploadChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GoSyncService/UploadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSyncServiceServer is the server API for GoSyncService service.
// All implementations must embed UnimplementedGoSyncServiceServer
// for forward compatibility
type GoSyncServiceServer interface {
	StartTransfer(context.Context, *StartRequest) (*Response, error)
	UploadChunk(context.Context, *ChunkRequest) (*Response, error)
	mustEmbedUnimplementedGoSyncServiceServer()
}

// UnimplementedGoSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoSyncServiceServer struct {
}

func (UnimplementedGoSyncServiceServer) StartTransfer(context.Context, *StartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTransfer not implemented")
}
func (UnimplementedGoSyncServiceServer) UploadChunk(context.Context, *ChunkRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedGoSyncServiceServer) mustEmbedUnimplementedGoSyncServiceServer() {}

// UnsafeGoSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSyncServiceServer will
// result in compilation errors.
type UnsafeGoSyncServiceServer interface {
	mustEmbedUnimplementedGoSyncServiceServer()
}

func RegisterGoSyncServiceServer(s grpc.ServiceRegistrar, srv GoSyncServiceServer) {
	s.RegisterService(&GoSyncService_ServiceDesc, srv)
}

func _GoSyncService_StartTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSyncServiceServer).StartTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoSyncService/StartTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSyncServiceServer).StartTransfer(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSyncService_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSyncServiceServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoSyncService/UploadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSyncServiceServer).UploadChunk(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoSyncService_ServiceDesc is the grpc.ServiceDesc for GoSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoSyncService",
	HandlerType: (*GoSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTransfer",
			Handler:    _GoSyncService_StartTransfer_Handler,
		},
		{
			MethodName: "UploadChunk",
			Handler:    _GoSyncService_UploadChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gosync.proto",
}
